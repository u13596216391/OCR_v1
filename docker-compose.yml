version: '3.8'

services:
  # Nginx 反向代理 - 统一入口
  nginx:
    build: ./nginx
    container_name: ocr_nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./data:/data:ro  # 只读挂载数据目录，用于提供静态文件访问
    depends_on:
      - backend
      - frontend
      - label-studio
    restart: unless-stopped

  db:
    # ... (db service remains unchanged) ...
    image: postgres:16
    container_name: ocr_postgres_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=ocr_pipeline_db
      - POSTGRES_USER=test
      - POSTGRES_PASSWORD=test1234
    ports:
      - "5432:5432"

  redis:
    # ... (redis service remains unchanged) ...
    image: redis:7-alpine
    container_name: ocr_redis
    ports:
      - "6379:6379"

  # ====================================================================
  # VVVV 请确保您的 backend 服务配置与此完全一致 VVVV
  # ====================================================================
  backend:
    build: ./backend
    container_name: ocr_backend
    command: >
      sh -c "python manage.py migrate && 
             gunicorn backend.wsgi:application --bind 0.0.0.0:8010"
    volumes:
      - ./backend:/app
      - ./data:/data         # <-- 重点检查这里：必须是 ./data:/data
    # 注意：端口不再直接暴露到主机，通过 Nginx 反向代理访问
    # 如需直接访问调试，可以取消注释下面的 ports
    # ports:
    #   - "8010:8010"
    depends_on:
      - db
      - redis
    environment:
      - LOCAL_DATA_PATH=/    # <-- 重点检查这里：必须是 /
      - POSTGRES_NAME=ocr_pipeline_db
      - POSTGRES_USER=test
      - POSTGRES_PASSWORD=test1234
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - LABEL_STUDIO_URL=${LABEL_STUDIO_URL:-http://label-studio:8081}
      - LABEL_STUDIO_API_TOKEN=${LABEL_STUDIO_API_TOKEN:-}
      - LABEL_STUDIO_PROJECT_ID=${LABEL_STUDIO_PROJECT_ID:-}
  # ====================================================================

  # ====================================================================
  # VVVV 请确保您的 celery 服务配置与此完全一致 VVVV
  # ====================================================================
  celery:
    build: ./backend
    container_name: ocr_celery_worker
    command: celery -A backend worker -l info
    volumes:
      - ./backend:/app
      - ./data:/data         # <-- 重点检查这里：必须是 ./data:/data
    depends_on:
      - backend
    environment:
      - LOCAL_DATA_PATH=/    # <-- 重点检查这里：必须是 /
      - POSTGRES_NAME=ocr_pipeline_db
      - POSTGRES_USER=test
      - POSTGRES_PASSWORD=test1234
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - MINERU_MODEL_SOURCE=modelscope
      # GPU 环境变量
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES:-0}
      - NVIDIA_VISIBLE_DEVICES=${NVIDIA_VISIBLE_DEVICES:-all}
      - NVIDIA_DRIVER_CAPABILITIES=${NVIDIA_DRIVER_CAPABILITIES:-compute,utility}
      # 设置 PyTorch CUDA 架构兼容性
      - TORCH_CUDA_ARCH_LIST=8.9+PTX
    # GPU 配置 - 使用 NVIDIA Docker Runtime
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all  # 使用所有GPU，或指定数量如 count: 1
              capabilities: [gpu]
  # ====================================================================

  frontend:
    image: nginx:alpine
    container_name: ocr_frontend
    volumes:
      - ./frontend/public:/usr/share/nginx/html:ro
    depends_on:
      - backend
    restart: unless-stopped
      
  label-studio:
    image: heartexlabs/label-studio:latest
    container_name: ocr_label_studio
    # 注意：端口不再直接暴露到主机，通过 Nginx 反向代理访问
    # 通过 http://your-server/label-studio 访问
    # 如需直接访问调试，可以取消注释下面的 ports
    # ports:
    #   - "8081:8081"
    volumes:
      - ./data:/label-studio/data

volumes:
  postgres_data: