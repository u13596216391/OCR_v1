version: '3.8'

services:
  db:
    # ... (db service remains unchanged) ...
    image: postgres:16
    container_name: ocr_postgres_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=ocr_pipeline_db
      - POSTGRES_USER=test
      - POSTGRES_PASSWORD=test1234
    ports:
      - "5432:5432"

  redis:
    # ... (redis service remains unchanged) ...
    image: redis:7-alpine
    container_name: ocr_redis
    ports:
      - "6379:6379"

  # ====================================================================
  # VVVV 请确保您的 backend 服务配置与此完全一致 VVVV
  # ====================================================================
  backend:
    build: ./backend
    container_name: ocr_backend
    command: >
      sh -c "
      echo 'Waiting for database...' &&
      while ! nc -z db 5432; do sleep 1; done &&
      echo 'Database is ready!' &&
      echo 'Waiting for Redis...' &&
      while ! nc -z redis 6379; do sleep 1; done &&
      echo 'Redis is ready!' &&
      python manage.py migrate &&
      gunicorn backend.wsgi:application --bind 0.0.0.0:8010 --timeout 300
      "
    volumes:
      - ./backend:/app
      - ./data:/data         # <-- 重点检查这里：必须是 ./data:/data
    expose:
      - "8010"               # 改为内部暴露，不直接映射到主机
    depends_on:
      - db
      - redis
    environment:
      - LOCAL_DATA_PATH=/    # <-- 重点检查这里：必须是 /
      - POSTGRES_NAME=ocr_pipeline_db
      - POSTGRES_USER=test
      - POSTGRES_PASSWORD=test1234
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
    restart: unless-stopped
  # ====================================================================

  # ====================================================================
  # VVVV 请确保您的 celery 服务配置与此完全一致 VVVV
  # ====================================================================
  celery:
    build: ./backend
    container_name: ocr_celery_worker
    command: >
      sh -c "
      echo 'Waiting for database...' &&
      while ! nc -z db 5432; do sleep 1; done &&
      echo 'Database is ready!' &&
      echo 'Waiting for Redis...' &&
      while ! nc -z redis 6379; do sleep 1; done &&
      echo 'Redis is ready!' &&
      celery -A backend worker -l info
      "
    volumes:
      - ./backend:/app
      - ./data:/data         # <-- 重点检查这里：必须是 ./data:/data
    depends_on:
      - backend
      - db
      - redis
    environment:
      - LOCAL_DATA_PATH=/    # <-- 重点检查这里：必须是 /
      - POSTGRES_NAME=ocr_pipeline_db
      - POSTGRES_USER=test
      - POSTGRES_PASSWORD=test1234
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - MINERU_MODEL_SOURCE=modelscope
    restart: unless-stopped
  # ====================================================================

  frontend:
    # ... (frontend and other services remain unchanged) ...
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ocr_frontend
    expose:
      - "8082"               # 改为内部暴露，不直接映射到主机
    depends_on:
      - backend
      
  label-studio:
    image: heartexlabs/label-studio:latest
    container_name: ocr_label_studio
    ports:
      - "8081:8081"
    volumes:
      - label_studio_data:/label-studio/data
    environment:
      - LABEL_STUDIO_LOCAL_FILES_SERVING_ENABLED=true
      - LABEL_STUDIO_LOCAL_FILES_DOCUMENT_ROOT=/label-studio/data
    restart: unless-stopped

  # Nginx 反向代理服务 - 统一入口
  nginx:
    image: nginx:alpine
    container_name: ocr_nginx
    ports:
      - "80:80"              # 主要访问端口，可根据需要修改
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
  label_studio_data: